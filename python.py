import streamlit as st
import pandas as pd
from google import genai
from google.genai.errors import APIError

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App Ph√¢n T√≠ch B√°o C√°o T√†i Ch√≠nh",
    layout="wide"
)

st.title("·ª®ng d·ª•ng Ph√¢n T√≠ch B√°o C√°o T√†i Ch√≠nh üìä")

# --- Kh·ªüi t·∫°o State cho Chatbot v√† D·ªØ li·ªáu ---
if "df_processed" not in st.session_state:
    st.session_state["df_processed"] = None
if "messages" not in st.session_state:
    st.session_state["messages"] = []

# --- H√†m t√≠nh to√°n ch√≠nh (S·ª≠ d·ª•ng Caching ƒë·ªÉ T·ªëi ∆∞u hi·ªáu su·∫•t) ---
@st.cache_data
def process_financial_data(df):
    """Th·ª±c hi·ªán c√°c ph√©p t√≠nh TƒÉng tr∆∞·ªüng v√† T·ª∑ tr·ªçng."""
    
    # ƒê·∫£m b·∫£o c√°c gi√° tr·ªã l√† s·ªë ƒë·ªÉ t√≠nh to√°n
    numeric_cols = ['NƒÉm tr∆∞·ªõc', 'NƒÉm sau']
    for col in numeric_cols:
        df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
    
    # 1. T√≠nh T·ªëc ƒë·ªô TƒÉng tr∆∞·ªüng
    df['T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng (%)'] = (
        (df['NƒÉm sau'] - df['NƒÉm tr∆∞·ªõc']) / df['NƒÉm tr∆∞·ªõc'].replace(0, 1e-9)
    ) * 100

    # 2. T√≠nh T·ª∑ tr·ªçng theo T·ªïng T√†i s·∫£n
    tong_tai_san_row = df[df['Ch·ªâ ti√™u'].str.contains('T·ªîNG C·ªòNG T√ÄI S·∫¢N', case=False, na=False)]
    
    if tong_tai_san_row.empty:
        raise ValueError("Kh√¥ng t√¨m th·∫•y ch·ªâ ti√™u 'T·ªîNG C·ªòNG T√ÄI S·∫¢N'.")

    tong_tai_san_N_1 = tong_tai_san_row['NƒÉm tr∆∞·ªõc'].iloc[0]
    tong_tai_san_N = tong_tai_san_row['NƒÉm sau'].iloc[0]

    divisor_N_1 = tong_tai_san_N_1 if tong_tai_san_N_1 != 0 else 1e-9
    divisor_N = tong_tai_san_N if tong_tai_san_N != 0 else 1e-9

    df['T·ª∑ tr·ªçng NƒÉm tr∆∞·ªõc (%)'] = (df['NƒÉm tr∆∞·ªõc'] / divisor_N_1) * 100
    df['T·ª∑ tr·ªçng NƒÉm sau (%)'] = (df['N√†u sau'] / divisor_N) * 100
    
    return df

# --- H√†m g·ªçi API Gemini cho Ph√¢n t√≠ch B√°o c√°o (Ch·ª©c nƒÉng 5) ---
def get_ai_analysis(data_for_ai, api_key):
    """G·ª≠i d·ªØ li·ªáu ph√¢n t√≠ch ƒë·∫øn Gemini API v√† nh·∫≠n nh·∫≠n x√©t."""
    try:
        client = genai.Client(api_key=api_key)
        model_name = 'gemini-2.5-flash'
        
        system_instruction = "B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh chuy√™n nghi·ªáp. D·ª±a tr√™n c√°c ch·ªâ s·ªë t√†i ch√≠nh ƒë∆∞·ª£c cung c·∫•p, h√£y ƒë∆∞a ra m·ªôt nh·∫≠n x√©t kh√°ch quan, ng·∫Øn g·ªçn (kho·∫£ng 3-4 ƒëo·∫°n) v·ªÅ t√¨nh h√¨nh t√†i ch√≠nh c·ªßa doanh nghi·ªáp. ƒê√°nh gi√° t·∫≠p trung v√†o t·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng, thay ƒë·ªïi c∆° c·∫•u t√†i s·∫£n v√† kh·∫£ nƒÉng thanh to√°n hi·ªán h√†nh."
        
        prompt = f"""
        D·ªØ li·ªáu th√¥ v√† ch·ªâ s·ªë:
        {data_for_ai}
        """

        response = client.models.generate_content(
            model=model_name,
            contents=prompt,
            config=genai.types.GenerateContentConfig(
                system_instruction=system_instruction
            )
        )
        return response.text

    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}"
    except KeyError:
        return "L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API 'GEMINI_API_KEY'. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh Secrets tr√™n Streamlit Cloud."
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"

# --- H√ÄM M·ªöI: X·ª≠ l√Ω Chat v·ªõi Gemini ---
def get_chat_response(prompt, processed_df_markdown, api_key):
    """X·ª≠ l√Ω c√¢u h·ªèi chat v·ªõi Gemini, s·ª≠ d·ª•ng d·ªØ li·ªáu t√†i ch√≠nh l√†m ng·ªØ c·∫£nh."""
    try:
        client = genai.Client(api_key=api_key)
        
        # T·∫°o ng·ªØ c·∫£nh (System Instruction)
        system_instruction = f"""
        B·∫°n l√† tr·ª£ l√Ω ph√¢n t√≠ch t√†i ch√≠nh th√¥ng minh (Financial Analyst Assistant). 
        T·∫•t c·∫£ c√°c c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n ph·∫£i d·ª±a tr√™n B·∫£ng B√°o c√°o T√†i ch√≠nh ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω sau ƒë√¢y.
        H√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch ng·∫Øn g·ªçn, ch√≠nh x√°c, v√† ch·ªâ d·ª±a tr√™n d·ªØ li·ªáu b·∫°n c√≥. 
        N·∫øu ng∆∞·ªùi d√πng h·ªèi c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn d·ªØ li·ªáu t√†i ch√≠nh, h√£y l·ªãch s·ª± t·ª´ ch·ªëi.
        
        D·ªØ li·ªáu t√†i ch√≠nh ƒë∆∞·ª£c ph√¢n t√≠ch:
        {processed_df_markdown}
        """
        
        # G·ª≠i to√†n b·ªô l·ªãch s·ª≠ chat v√† prompt hi·ªán t·∫°i ƒë·ªÉ gi·ªØ ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán
        contents = []
        for message in st.session_state["messages"]:
            contents.append(
                {"role": "user" if message["role"] == "user" else "model", "parts": [{"text": message["content"]}]}
            )
        
        # Th√™m prompt hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
        contents.append({"role": "user", "parts": [{"text": prompt}]})

        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=contents,
            config=genai.types.GenerateContentConfig(
                system_instruction=system_instruction
            )
        )
        return response.text

    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"

# --- Ch·ª©c nƒÉng 1: T·∫£i File ---
uploaded_file = st.file_uploader(
    "1. T·∫£i file Excel B√°o c√°o T√†i ch√≠nh (Ch·ªâ ti√™u | NƒÉm tr∆∞·ªõc | NƒÉm sau)",
    type=['xlsx', 'xls']
)

if uploaded_file is not None:
    try:
        df_raw = pd.read_excel(uploaded_file)
        
        # Ti·ªÅn x·ª≠ l√Ω: ƒê·∫£m b·∫£o ch·ªâ c√≥ 3 c·ªôt quan tr·ªçng
        df_raw.columns = ['Ch·ªâ ti√™u', 'NƒÉm tr∆∞·ªõc', 'NƒÉm sau']
        
        # X·ª≠ l√Ω d·ªØ li·ªáu
        df_processed = process_financial_data(df_raw.copy())
        
        # L∆ØU D·ªÆ LI·ªÜU ƒê√É X·ª¨ L√ù V√ÄO SESSION STATE
        st.session_state['df_processed'] = df_processed

        # T·∫†O C√ÅC TAB
        tab_analysis, tab_chat = st.tabs(["Ph√¢n T√≠ch B√°o C√°o", "H·ªèi ƒê√°p Chuy√™n S√¢u v·ªõi AI"])

        with tab_analysis:
            if df_processed is not None:
                
                # --- Ch·ª©c nƒÉng 2 & 3: Hi·ªÉn th·ªã K·∫øt qu·∫£ ---
                st.subheader("2. T·ªëc ƒë·ªô TƒÉng tr∆∞·ªüng & 3. T·ª∑ tr·ªçng C∆° c·∫•u T√†i s·∫£n")
                st.dataframe(df_processed.style.format({
                    'NƒÉm tr∆∞·ªõc': '{:,.0f}',
                    'NƒÉm sau': '{:,.0f}',
                    'T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng (%)': '{:.2f}%',
                    'T·ª∑ tr·ªçng NƒÉm tr∆∞·ªõc (%)': '{:.2f}%',
                    'T·ª∑ tr·ªçng NƒÉm sau (%)': '{:.2f}%'
                }), use_container_width=True)
                
                # --- Ch·ª©c nƒÉng 4: T√≠nh Ch·ªâ s·ªë T√†i ch√≠nh ---
                st.subheader("4. C√°c Ch·ªâ s·ªë T√†i ch√≠nh C∆° b·∫£n")
                
                thanh_toan_hien_hanh_N = "N/A"
                thanh_toan_hien_hanh_N_1 = "N/A"
                
                try:
                    # L·∫•y T√†i s·∫£n ng·∫Øn h·∫°n
                    tsnh_n = df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('T√ÄI S·∫¢N NG·∫ÆN H·∫†N', case=False, na=False)]['NƒÉm sau'].iloc[0]
                    tsnh_n_1 = df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('T√ÄI S·∫¢N NG·∫ÆN H·∫†N', case=False, na=False)]['NƒÉm tr∆∞·ªõc'].iloc[0]

                    # L·∫•y N·ª£ ng·∫Øn h·∫°n
                    no_ngan_han_N = df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('N·ª¢ NG·∫ÆN H·∫†N', case=False, na=False)]['NƒÉm sau'].iloc[0]  
                    no_ngan_han_N_1 = df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('N·ª¢ NG·∫ÆN H·∫†N', case=False, na=False)]['NƒÉm tr∆∞·ªõc'].iloc[0]

                    # T√≠nh to√°n
                    thanh_toan_hien_hanh_N = tsnh_n / no_ngan_han_N
                    thanh_toan_hien_hanh_N_1 = tsnh_n_1 / no_ngan_han_N_1
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric(
                            label="Ch·ªâ s·ªë Thanh to√°n Hi·ªán h√†nh (NƒÉm tr∆∞·ªõc)",
                            value=f"{thanh_toan_hien_hanh_N_1:.2f} l·∫ßn"
                        )
                    with col2:
                        st.metric(
                            label="Ch·ªâ s·ªë Thanh to√°n Hi·ªán h√†nh (NƒÉm sau)",
                            value=f"{thanh_toan_hien_hanh_N:.2f} l·∫ßn",
                            delta=f"{thanh_toan_hien_hanh_N - thanh_toan_hien_hanh_N_1:.2f}"
                        )
                        
                except IndexError:
                    st.warning("Thi·∫øu ch·ªâ ti√™u 'T√ÄI S·∫¢N NG·∫ÆN H·∫†N' ho·∫∑c 'N·ª¢ NG·∫ÆN H·∫†N' ƒë·ªÉ t√≠nh ch·ªâ s·ªë.")
                except ZeroDivisionError:
                    st.warning("L·ªói chia cho 0 khi t√≠nh ch·ªâ s·ªë thanh to√°n hi·ªán h√†nh (N·ª£ ng·∫Øn h·∫°n b·∫±ng 0).")
                    
                # --- Ch·ª©c nƒÉng 5: Nh·∫≠n x√©t AI ---
                st.subheader("5. Nh·∫≠n x√©t T√¨nh h√¨nh T√†i ch√≠nh (AI)")
                
                # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ g·ª≠i cho AI
                data_for_ai = pd.DataFrame({
                    'Ch·ªâ ti√™u': [
                        'To√†n b·ªô B·∫£ng ph√¢n t√≠ch (d·ªØ li·ªáu th√¥)', 
                        'Thanh to√°n hi·ªán h√†nh (N-1)', 
                        'Thanh to√°n hi·ªán h√†nh (N)'
                    ],
                    'Gi√° tr·ªã': [
                        df_processed.to_markdown(index=False),
                        f"{thanh_toan_hien_hanh_N_1}", 
                        f"{thanh_toan_hien_hanh_N}"
                    ]
                }).to_markdown(index=False) 

                if st.button("Y√™u c·∫ßu AI Ph√¢n t√≠ch"):
                    api_key = st.secrets.get("GEMINI_API_KEY") 
                    
                    if api_key:
                        with st.spinner('ƒêang g·ª≠i d·ªØ li·ªáu v√† ch·ªù Gemini ph√¢n t√≠ch...'):
                            ai_result = get_ai_analysis(data_for_ai, api_key)
                            st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI:**")
                            st.info(ai_result)
                    else:
                        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API. Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets.")

        # =========================================================================
        # KHUNG CHAT M·ªöI
        # =========================================================================
        with tab_chat:
            st.subheader("Tr√≤ chuy·ªán c√πng Tr·ª£ l√Ω Ph√¢n t√≠ch (S·ª≠ d·ª•ng d·ªØ li·ªáu b·∫°n ƒë√£ t·∫£i)")
            
            api_key_chat = st.secrets.get("GEMINI_API_KEY") 
            if not api_key_chat:
                st.error("Kh√¥ng th·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng Chat: Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY'.")
            else:
                # 1. Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
                for message in st.session_state["messages"]:
                    with st.chat_message(message["role"]):
                        st.markdown(message["content"])

                # 2. X·ª≠ l√Ω input m·ªõi
                if prompt := st.chat_input("H·ªèi v·ªÅ T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng, t·ª∑ tr·ªçng, ho·∫∑c b·∫•t k·ª≥ ch·ªâ ti√™u n√†o..."):
                    
                    # Th√™m prompt c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
                    st.session_state["messages"].append({"role": "user", "content": prompt})
                    with st.chat_message("user"):
                        st.markdown(prompt)
                    
                    # Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ ƒë∆∞a v√†o ng·ªØ c·∫£nh chat
                    df_markdown_context = st.session_state['df_processed'].to_markdown(index=False)

                    # G·ªçi API v√† hi·ªÉn th·ªã ph·∫£n h·ªìi
                    with st.chat_message("assistant"):
                        with st.spinner("ƒêang t√¨m ki·∫øm c√¢u tr·∫£ l·ªùi t·ª´ d·ªØ li·ªáu..."):
                            response = get_chat_response(prompt, df_markdown_context, api_key_chat)
                            st.markdown(response)
                            
                    # Th√™m ph·∫£n h·ªìi c·ªßa AI v√†o l·ªãch s·ª≠
                    st.session_state["messages"].append({"role": "assistant", "content": response})

    except ValueError as ve:
        st.error(f"L·ªói c·∫•u tr√∫c d·ªØ li·ªáu: {ve}")
    except Exception as e:
        st.error(f"C√≥ l·ªói x·∫£y ra khi ƒë·ªçc ho·∫∑c x·ª≠ l√Ω file: {e}. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng file v√† c·ªôt.")

else:
    st.info("Vui l√≤ng t·∫£i l√™n file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch v√† s·ª≠ d·ª•ng khung chat.")
